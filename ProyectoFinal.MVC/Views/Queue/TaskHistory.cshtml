@model IEnumerable<ProyectoFinal.Data.TaskLog>
@{
    ViewBag.Title = "Historial de Tarea";
    var task = ViewBag.Task as ProyectoFinal.Data.Task;

    
    var lastErrorLog = Model
        .OrderByDescending(l => l.ExecutionStart)
        .FirstOrDefault(l => l.Success == false && !string.IsNullOrEmpty(l.ErrorMessage));

    var lastErrorMessage = lastErrorLog?.ErrorMessage ?? "";
}

<div class="space-y-6">
    <!-- Header -->
    <div class="border-b border-gray-200 pb-4">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Historial de Tarea: @task.Title</h1>
                <p class="mt-2 text-sm text-gray-600">Registro detallado de todas las ejecuciones de esta tarea</p>
            </div>
            <div class="mt-4 sm:mt-0 flex gap-3">
                <a href="@Url.Action("Index", "Queue")" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    Volver a Cola
                </a>

                <!-- Botón para abrir el modal con título y error exactos -->
                <button id="openContact" type="button"
                        data-title="@task.Title"
                        data-error="@lastErrorMessage"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors">
                    Enviar correo
                </button>
            </div>
        </div>
    </div>

    <!-- Información de la Tarea -->
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Información de la Tarea</h3>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="space-y-4">
                    <div>
                        <div class="text-sm font-medium text-gray-500">Título</div>
                        <div class="mt-1 text-sm text-gray-900">@task.Title</div>
                    </div>
                    <div>
                        <div class="text-sm font-medium text-gray-500">Descripción</div>
                        <div class="mt-1 text-sm text-gray-900">@task.Description</div>
                    </div>
                    <div>
                        <div class="text-sm font-medium text-gray-500">Prioridad</div>
                        <div class="mt-1">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @(task.Priority == "Alta" ? "bg-red-100 text-red-800" : task.Priority == "Media" ? "bg-yellow-100 text-yellow-800" : "bg-gray-100 text-gray-800")">
                                @task.Priority
                            </span>
                        </div>
                    </div>
                </div>
                <div class="space-y-4">
                    <div>
                        <div class="text-sm font-medium text-gray-500">Estado</div>
                        <div class="mt-1">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @(task.Status == "Pendiente" ? "bg-yellow-100 text-yellow-800" : task.Status == "En Proceso" ? "bg-blue-100 text-blue-800" : task.Status == "Finalizada" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                @task.Status
                            </span>
                        </div>
                    </div>
                    <div>
                        <div class="text-sm font-medium text-gray-500">Fecha Programada</div>
                        <div class="mt-1 text-sm text-gray-900">@task.ScheduledDate.ToString("dd/MM/yyyy HH:mm")</div>
                    </div>
                    <div>
                        <div class="text-sm font-medium text-gray-500">Fecha de Creación</div>
                        <div class="mt-1 text-sm text-gray-900">@(task.CreatedAt?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Historial de Ejecución -->
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Historial de Ejecución</h3>
        </div>
        <div class="p-6">
            @if (Model.Any())
            {
                <div class="overflow-hidden">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Inicio</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Fin</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duración</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mensaje de Error</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var log in Model.OrderByDescending(l => l.ExecutionStart))
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@(log.ExecutionStart?.ToString("dd/MM/yyyy HH:mm:ss") ?? "N/A")</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@(log.ExecutionEnd?.ToString("dd/MM/yyyy HH:mm:ss") ?? "N/A")</td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @(log.Success == true ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                            @(log.Success == true ? "Exitoso" : "Fallido")
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @if (log.ExecutionStart.HasValue && log.ExecutionEnd.HasValue)
                                        {
                                            var duration = log.ExecutionEnd.Value - log.ExecutionStart.Value;
                                            <span class="font-mono">@duration.ToString(@"mm\:ss")</span>
                                        }
                                        else
                                        {
                                            <span class="text-gray-400">-</span>
                                        }
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-500 max-w-xs">
                                        @if (!string.IsNullOrEmpty(log.ErrorMessage))
                                        {
                                            <div class="truncate" title="@log.ErrorMessage">
                                                <span class="text-red-600">@log.ErrorMessage</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-gray-400">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-8">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                    <p class="mt-2 text-sm text-gray-500">No hay historial de ejecución disponible para esta tarea</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de Contacto -->
<div id="contactModal" class="fixed inset-0 z-50 hidden">
    <!-- Fondo -->
    <div class="absolute inset-0 bg-black/50"></div>

    <!-- Contenido -->
    <div class="relative mx-auto mt-16 w-full max-w-lg bg-white rounded-xl shadow-lg">
        <div class="flex items-center justify-between px-6 py-4 border-b">
            <h3 class="text-lg font-semibold">Enviar correo</h3>
            <button id="contactClose" type="button" class="text-gray-500 hover:text-gray-700">✕</button>
        </div>

        <div class="p-6">
            <div id="contact-alert" class="hidden px-4 py-2 rounded text-sm"></div>
            <div id="contact-spinner" class="hidden mb-4 text-sm text-gray-600">Enviando…</div>

            <form id="contactForm">
                <div class="space-y-4">
                    <div>
                        <label for="contact-name" class="block text-sm font-medium text-gray-700">Nombre</label>
                        <input type="text" id="contact-name" name="name" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    <div>
                        <label for="contact-email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="contact-email" name="email" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    <div>
                        <label for="contact-subject" class="block text-sm font-medium text-gray-700">Asunto</label>
                        <input type="text" id="contact-subject" name="subject" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    <div>
                        <label for="contact-message" class="block text-sm font-medium text-gray-700">Mensaje</label>
                        <textarea id="contact-message" name="message" rows="4" required
                                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"></textarea>
                    </div>

                    <div class="flex justify-end gap-3 pt-2">
                        <button type="button" id="contactCancel"
                                class="inline-flex items-center px-4 py-2 rounded-md border border-gray-300 text-gray-700 hover:bg-gray-50">
                            Cancelar
                        </button>
                        <button type="submit"
                                class="inline-flex items-center px-4 py-2 rounded-md text-white bg-blue-600 hover:bg-blue-700">
                            Enviar Mensaje
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- EmailJS -->
<script src="https://cdn.jsdelivr.net/npm/emailjs-com@3/dist/email.min.js"></script>

@section scripts {
    <script>
(function () {
    
    emailjs.init("DvkQr9T-CzO1LF4kv");

    const modal    = document.getElementById('contactModal');
    const openBtn  = document.getElementById('openContact');
    const closeBtn = document.getElementById('contactClose');
    const cancel   = document.getElementById('contactCancel');

    const form     = document.getElementById('contactForm');
    const spinner  = document.getElementById('contact-spinner');
    const alertBox = document.getElementById('contact-alert');

    const nameEl   = document.getElementById('contact-name');
    const emailEl  = document.getElementById('contact-email');
    const subjEl   = document.getElementById('contact-subject');
    const msgEl    = document.getElementById('contact-message');

    function showAlert(message, type) {
        alertBox.textContent = message;
        alertBox.className = 'px-4 py-2 rounded text-sm ' + (type === 'success'
            ? 'bg-green-100 text-green-800'
            : 'bg-red-100 text-red-800');
        alertBox.classList.remove('hidden');
        setTimeout(() => alertBox.classList.add('hidden'), 5000);
    }

    function openModal() {
        
        subjEl.value = openBtn.dataset.title || '';
        msgEl.value  = openBtn.dataset.error || '';
        modal.classList.remove('hidden');
    }
    function closeModal() {
        modal.classList.add('hidden');
        form.reset();
        alertBox.classList.add('hidden');
    }

    openBtn.addEventListener('click', openModal);
    closeBtn.addEventListener('click', closeModal);
    cancel.addEventListener('click', closeModal);
    modal.addEventListener('click', function (e) { if (e.target === modal) closeModal(); });

    form.addEventListener('submit', function (e) {
        e.preventDefault();

        const name    = nameEl.value.trim();
        const email   = emailEl.value.trim();
        const subject = subjEl.value.trim();   
        const message = msgEl.value.trim();    

        if (!name || !email || !subject || !message) {
            showAlert('Por favor completa todos los campos', 'error');
            return;
        }

        
        const re = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
        if (!re.test(email.toLowerCase())) {
            showAlert('Por favor ingresa un email válido', 'error');
            return;
        }

        
        if (Math.random() < 0.3) {
            showAlert('Error simulado del 30% al enviar el mensaje.', 'error');
            return;
        }

        spinner.classList.remove('hidden');
        alertBox.classList.add('hidden');

        emailjs.send("service_lhi6zid", "template_eesy2nr", {
            from_name: name,
            reply_to: email,
            subject: subject,  
            message: message,   
            to_email: "theejosh2@@gmail.com" 
        })
        .then(function () {
            spinner.classList.add('hidden');
            showAlert('¡Mensaje enviado con éxito! Me pondré en contacto contigo pronto.', 'success');
            form.reset();
        }, function (error) {
            spinner.classList.add('hidden');
            showAlert('Error al enviar el mensaje: ' + (error && error.text ? error.text : error), 'error');
        });
    });
})();
    </script>
}
