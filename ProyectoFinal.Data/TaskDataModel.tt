<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"TaskDataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.Spatial;

<#
if (container.FunctionImports.Any())
{
#>
using System.Data.Entity.Core.Objects;
using System.Linq;
<#
}
#>

<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#>
{
<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
        var entity = entitySet.ElementType;
        var entityName = code.Escape(entity);
        var entitySetName = code.Escape(entitySet);
        var entitySetType = code.Escape(entitySet.ElementType);
        var entitySetTypePluralized = code.Escape(ef.GetElementType(entitySet.ElementType));
#>
    public virtual DbSet<<#=entitySetType#>> <#=entitySetName#> { get; set; }
<#
    }

    foreach (var functionImport in container.FunctionImports)
    {
        WriteFunctionImport(functionImport, code, ef);
    }
#>
}

<#
foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + ".cs");
    BeginNamespace(namespaceName, code);
#>
<#=Accessibility.ForType(entity)#> partial class <#=code.Escape(entity)#>
{
<#
    var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && ef.IsKey(entity, p) && ef.UnderlyingClrType(p.TypeUsage.EdmType) == typeof(int) && p.Name == entity.KeyMembers.First().Name);
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var referenceNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || referenceNavigationProperties.Any())
    {
#>
    public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = 0;
<#
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {
#>
        this.<#=code.Escape(navigationProperty)#> = new HashSet<<#=code.Escape(navigationProperty.ToEndMember.GetEntityType())#>>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == entity);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
            WriteProperty(code, ef, edmProperty);
        }
    }

    if (collectionNavigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in collectionNavigationProperties)
        {
            WriteNavigationProperty(code, navigationProperty);
        }
    }

    if (referenceNavigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in referenceNavigationProperties)
        {
            WriteNavigationProperty(code, navigationProperty);
        }
    }
#>
}

<#
    EndNamespace(namespaceName);
}

foreach (var complex in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(namespaceName, code);
#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == complex);
    if (complexProperties.Any())
    {
        foreach (var edmProperty in complexProperties)
        {
            WriteProperty(code, ef, edmProperty);
        }
        }
#>
    }

<#
    EndNamespace(namespaceName);
}

fileManager.Process();
#>
<#+
void WriteProperty(CodeGenerationTools code, MetadataTools ef, EdmProperty edmProperty)
{
    WriteProperty(Accessibility.ForProperty(edmProperty), TypeMapper.GetTypeName(edmProperty.TypeUsage, code), code.Escape(edmProperty), code.SpaceAfter(Accessibility.ForGetter(edmProperty)), code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)), navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType, code.Escape(navigationProperty), code.SpaceAfter(Accessibility.ForGetter(navigationProperty)), code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent("    ");
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteFunctionImport(EdmFunction functionImport, CodeGenerationTools code, MetadataTools ef)
{
    if (functionImport.ReturnParameter == null)
    {
        return;
    }

    var returnType = functionImport.ReturnParameter.TypeUsage.EdmType;
    var isCollection = returnType is CollectionType;
    var elementType = isCollection ? ((CollectionType)returnType).TypeUsage.EdmType : returnType;
    var isComplexType = elementType is StructuralType && !(elementType is EntityType);
    var returnTypeName = code.Escape(ef.GetElementType(elementType));
    var returnTypeString = isCollection ? "ObjectResult<" + returnTypeName + ">" : returnTypeName;
#>

    public virtual <#=returnTypeString#> <#=code.Escape(functionImport)#>(<#=string.Join(", ", functionImport.Parameters.Select(p => p.Mode.ToString().ToLower() + " " + code.Escape(ef.GetElementType(p.TypeUsage.EdmType)) + " " + p.Name))#>)
    {
<#+
        foreach (var parameter in functionImport.Parameters)
        {
            var parameterName = code.Escape(parameter);
            var parameterType = code.Escape(ef.GetElementType(parameter.TypeUsage.EdmType));
#>
        var <#=parameterName#>Parameter = <#=parameterName#> != null ?
            new ObjectParameter("<#=parameter.Name#>", <#=parameterName#>) :
            new ObjectParameter("<#=parameter.Name#>", typeof(<#=parameterType#>));
<#+
        }
#>

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<#=isCollection ? "<" + returnTypeName + ">" : ""#>("<#=functionImport.Name#>"<#=string.Join("", functionImport.Parameters.Select(p => ", " + code.Escape(p) + "Parameter"))#>);
    }
<#+
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string[] settableProperties = new string[] { "Id" };
    return settableProperties.Contains(member.Name) || Accessibility.ForProperty(member) != "private";
}

string InitializedTrackingProperty(EdmProperty property, CodeGenerationTools code)
{
    var entityType = property.DeclaringType as EntityType;
    if (entityType == null || entityType.KeyMembers.Count != 1)
    {
        return null;
    }

    var keyMember = entityType.KeyMembers.Single();
    if (keyMember.Name != property.Name)
        {
            return null;
        }

    if (property.TypeUsage.EdmType is PrimitiveType primitiveType)
    {
        if (primitiveType.ClrEquivalentType == typeof(int))
        {
            return "0";
        }
        if (primitiveType.ClrEquivalentType == typeof(Guid))
        {
            return "Guid.NewGuid()";
        }
    }

    return null;
}
#>
