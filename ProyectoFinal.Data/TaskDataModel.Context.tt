<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"TaskDataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<#
if (container.FunctionImports.Any())
{
#>
using System.Data.Entity.Core.Objects;
using System.Linq;
<#
}
#>

<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : DbContext
{
    public <#=code.Escape(container)#>()
        : base("name=<#=container.Name#>")
    {
<#
if (!loader.IsLazyLoadingEnabled(container))
{
#>
        this.Configuration.LazyLoadingEnabled = false;
<#
}
foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(e => !e.MetadataProperties.Any(mp => mp.Name == "Type") || e.MetadataProperties.First(mp => mp.Name == "Type").Value.ToString() == "Tables"))
{
#>
        this.Configuration.ProxyCreationEnabled = false;
<#
    break;
}
#>
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

<#
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    public virtual DbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#> { get; set; }
<#
    }

    foreach (var functionImport in container.FunctionImports)
    {
        WriteFunctionImport(functionImport, code, ef);
    }
#>
}
<#+
void WriteFunctionImport(EdmFunction functionImport, CodeGenerationTools code, MetadataTools ef)
{
    if (functionImport.ReturnParameter == null)
    {
        return;
    }

    var returnType = functionImport.ReturnParameter.TypeUsage.EdmType;
    var isCollection = returnType is CollectionType;
    var elementType = isCollection ? ((CollectionType)returnType).TypeUsage.EdmType : returnType;
    var isComplexType = elementType is StructuralType && !(elementType is EntityType);
    var returnTypeName = code.Escape(ef.GetElementType(elementType));
    var returnTypeString = isCollection ? "ObjectResult<" + returnTypeName + ">" : returnTypeName;
#>

    public virtual <#=returnTypeString#> <#=code.Escape(functionImport)#>(<#=string.Join(", ", functionImport.Parameters.Select(p => p.Mode.ToString().ToLower() + " " + code.Escape(ef.GetElementType(p.TypeUsage.EdmType)) + " " + p.Name))#>)
    {
<#+
        foreach (var parameter in functionImport.Parameters)
        {
            var parameterName = code.Escape(parameter);
            var parameterType = code.Escape(ef.GetElementType(parameter.TypeUsage.EdmType));
#>
        var <#=parameterName#>Parameter = <#=parameterName#> != null ?
            new ObjectParameter("<#=parameter.Name#>", <#=parameterName#>) :
            new ObjectParameter("<#=parameter.Name#>", typeof(<#=parameterType#>));
<#+
        }
#>

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<#=isCollection ? "<" + returnTypeName + ">" : ""#>("<#=functionImport.Name#>"<#=string.Join("", functionImport.Parameters.Select(p => ", " + code.Escape(p) + "Parameter"))#>);
    }
<#+
}
#>
